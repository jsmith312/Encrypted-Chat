EXAMPLE:
Terminal 1:

There is no other client on this IP:port pairing, waiting for them to join.
Client Connected.
Welcome to (soon to be) encrypted chat program.
Press enter/return.

Chat is now encrypted.
Hello 
d3479f578e6b8fa1					<<< These lines are the encrypted text of the other user's message prior to being decrypted.
16a98ef008d568d6					<<< Remove this option from line 310 in chat.java   <message + "    ">
ab3f65115b1b73f8

    bob: Hey
    
    
Terminal 2:

Client Connected.
Welcome to (soon to be) encrypted chat program.
Please wait...
Chat is now encrypted.
0f662e4bc0e3d967
cfe0cb08e29c2e10
2b556a1a107286a9

    alice: Hello
Hey














Terminal 1:

./RSA.sh -k

//Take the keys and plug into next part

javac -cp "gnu.getopt.jar:." chat.java -c
javac -cp "gnu.getopt.jar:." DES_C.java -c
javac -cp "gnu.getopt.jar:." RSA_C.java -c

java -cp "gnu.getopt.jar:." chat --alice -a <Alice private key (e)> 
								 -m <Alice modulus (n)> 
								 -b <Bob public (d from other terminal)> 
								 -n <bob mod (n) from other terminal>
								 -p port number
								 -i localhost

//wait for otehr client to do the same

Terminal 2:

./RSA.sh -k
//Take the keys and plug into next part

java -cp "gnu.getopt.jar:." chat --bob -b <Bob private key (e)> 
								 -n <Bob modulus (n)> 
								 -a <ALice public (d from other terminal)> 
								 -m <alice mod (n) from other terminal>
								 -p port number
								 -i localhost
								 
//wait

Terminal 1:
//Type anything to start handshake.
//"Chat is now encrypted." shuld appear on both terminals

//The first message sent will be encrypted and decrypted properly. The next 
//  one will show obvious flaws because the variable holding the last messsage is not cleared. 
//  This variable might be in char.java or DES_C.java.
//If you remove the DES_C.encrypt... and ...decrypt... from chat.java then the chat will function normally without encryption.
